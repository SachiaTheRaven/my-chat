{"version":3,"sources":["TextInput.tsx","TextInputAndButton.tsx","Proxy.ts","EventProducer.ts","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","state","value","props","focus","attrs","this","autofocus","autoFocus","onEnter","onKeyDown","e","keyCode","className","type","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","proxy","ws","inbox","WebSocket","addEventListener","p","JSON","parse","data","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","style","height","user","tag","text","sendContactRequest","map","key","selectedConversation","email","sendPacket","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","onBack","id","senderId","onSend","newtext","referenceTo","contentType","Main","undefined","Login","password","displayName","register","src","width","href","preventDefault","toLowerCase","staySignedIn","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kOAWaA,EAAb,4MAEIC,MAAQ,CAAEC,MAAO,EAAKC,MAAMD,MAAOE,OAAO,GAF9C,uDAGc,IAAD,SACDC,EAAQ,GAQZ,OAPIC,KAAKH,MAAMI,YACXF,EAAMG,WAAY,GAClBF,KAAKH,MAAMM,UACXJ,EAAMK,UAAY,SAAAC,GACI,KAAdA,EAAEC,SACF,EAAKT,MAAMM,YAGnB,yBAAKI,UAAU,cACX,yCAAOC,KAAI,UAAER,KAAKH,MAAMW,YAAb,QAAqB,OAAQZ,MAAOI,KAAKL,MAAMC,MACtDa,SAAU,SAAAJ,GAAM,IAAD,IACX,EAAKK,SAAS,CAAEd,MAAOS,EAAEM,OAAOf,QAChC,eAAKC,OAAMY,gBAAX,gBAAsBJ,EAAEM,OAAOf,QAEnCgB,OAAQ,kBAAM,EAAKF,SAAS,CAAEZ,OAAO,KACrCe,QAAS,kBAAM,EAAKH,SAAS,CAAEZ,OAAO,MAClCC,IACR,yBAAKQ,UAAU,oBACf,2BAAOA,UAAWP,KAAKL,MAAMC,OAASI,KAAKL,MAAMG,MAAQ,WAAa,IACjEE,KAAKH,MAAMiB,kBAxBhC,GAA+BC,aCHlBC,EAAb,4MAEIC,UAAYC,IAAMC,YAFtB,wDAGe,IAAD,WACN,WAAI,EAAAnB,KAAKH,OAAMuB,eAAf,aAAI,6BAAqBpB,KAAKiB,UAAUI,eAApC,aAAqB,EAAwB1B,MAAMC,aAAnD,QAA4D,OAC5D,UAAAI,KAAKiB,UAAUI,eAAf,SAAwBX,SAAS,CAAEd,MAAO,QALtD,+BAOc,IAAD,OACL,OACI,yBAAKW,UAAU,yBACX,kBAAC,EAAD,iBAAeP,KAAKH,MAApB,CAA2ByB,IAAKtB,KAAKiB,UAAWd,QAAS,kBAAM,EAAKiB,cACpE,4BAAQZ,KAAK,SAASY,QAAS,kBAAM,EAAKA,YACrCpB,KAAKH,MAAM0B,oBAZhC,GAAwCR,a,OCgC7BS,EAAQ,I,kDApCf,aAAe,IAAD,8BACV,gBAFIC,QACM,IAgCdC,MAA8B,KA9B1B,EAAKD,GAAK,IAAIE,UAAU,+BACxB,EAAKF,GAAGG,iBAAiB,QAAQ,eAEjC,EAAKH,GAAGG,iBAAiB,WAAW,SAAAvB,OAEpC,EAAKoB,GAAGG,iBAAiB,WAAW,SAAAvB,GAAM,IAAD,EACjCwB,EAAyBC,KAAKC,MAAM1B,EAAE2B,MAC1C,OAAQH,EAAErB,MACN,IAAK,QACDyB,MAAMJ,EAAEK,SACR,MACJ,IAAK,QACD,EAAKR,MAAQG,EAAEH,MACf,EAAKS,SAAS,SACd,MACJ,IAAK,UACD,IAAIC,EAAMP,EAAEQ,UACZ,YAAKX,MAAOY,cAAcC,MAAK,SAAAC,GAAC,OAAIA,EAAEH,YAAcD,YAApD,SAA0DK,aAAaC,KAAKb,EAAEK,SAC9E,EAAKC,SAAS,UAAUC,EAAIP,EAAEK,SAC9B,MACJ,IAAK,oBACD,EAAKR,MAAOY,cAAcI,KAAKb,EAAEc,cACjC,EAAKR,SAAS,eAAeN,EAAEc,aAAaN,eAxB9C,E,uDA6BHO,GACP5C,KAAKyB,GAAGoB,KAAKf,KAAKgB,UAAUF,Q,GClCpC,iDACYG,UAAyD,GADrE,6DAEwCvC,EAASwC,EAAUC,GACnDjD,KAAK+C,UAAUL,KAAK,CAAElC,OAAMwC,WAAUC,UAH9C,0CAK2CzC,EAASwC,GAC5ChD,KAAK+C,UAAUG,OAAOlD,KAAK+C,UAAUI,WAAU,SAAAX,GAAC,OAAIA,EAAEhC,OAASA,GAAQgC,EAAEQ,WAAaA,KAAW,KANzG,+BAQ0CxC,GAAmB,IAAD,uBAAN4C,EAAM,iCAANA,EAAM,sCAC/BpD,KAAK+C,UAAUM,QAAO,SAAAb,GAAC,OAAIA,EAAEhC,OAASA,MADP,IACpD,kCAASwC,EAAT,SACI,EAAAA,EAASA,UAASM,KAAlB,SAAuBN,EAASC,KAAhC,OAAwCG,KAFQ,iCAR5D,6CAY2BH,GACnB,IAAKA,EACD,MAAM,IAAIM,MAAM,uBACpBvD,KAAK+C,UAAY/C,KAAK+C,UAAUM,QAAO,SAAAb,GAAC,OAAIA,EAAES,MAAQA,SAf9D,OCKaO,EAAb,uKAMc,IAAD,OACDC,EAAczD,KAAKH,MAAM8C,aAAaF,aAAaiB,OAAS,EAC5D1D,KAAKH,MAAM8C,aAAaF,aAAazC,KAAKH,MAAM8C,aAAaF,aAAaiB,OAAS,GAAK,KAC5F,OACI,yBAAKnD,UAAW,qBAAuBP,KAAKH,MAAM8D,SAAW,YAAc,IACvEvC,QAAS,kBAAM,EAAKvB,MAAM+D,aAC1B,yBAAKrD,UAAU,OACX,0BAAMA,UAAU,gBAAgBP,KAAKH,MAAM8C,aAAakB,MACxD,0BAAMtD,UAAU,QACXkD,GAAe,IAAIK,KAAKL,EAAYM,WAAWC,uBAGxD,0BAAMzD,UAAU,gBAAhB,OAAgCkD,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAaQ,YAlB7D,0CAsByB,IAAD,OAChBzC,EAAMI,iBAAiB,WAAW,SAACQ,EAAK8B,GAChC9B,IAAQ,EAAKvC,MAAM8C,aAAaN,WAChC,EAAK8B,gBACVnE,QA1BX,6CA6BQwB,EAAM4C,uBAAuBpE,UA7BrC,GAAsCe,aCCzBsD,EAAb,uKAKc,IAAD,OAEL,OACI,yBAAK9D,UAAU,YAAY+D,MAFD,CAACC,OAAO,SAG9B,uBAAGhE,UAAU,UAAb,WAA+BP,KAAKH,MAAM6B,MAAM8C,KAAKC,KACrD,kBAAC,EAAD,CAAoBjE,KAAK,OAAOM,YAAY,6BACxCS,cAAc,MACdH,QAAS,SAAAsD,GAAI,OAAI,EAAKC,mBAAmBD,MAC7C,yBAAKnE,UAAU,iBACVP,KAAKH,MAAM6B,MAAMY,cAAcsC,KAAI,SAAApC,GAAC,OACjC,kBAAC,EAAD,CACIqC,IAAKrC,EAAEH,UACPM,aAAcH,EACdmB,SAAUnB,IAAM,EAAK3C,MAAMiF,qBAC3BlB,SAAU,kBAAM,EAAK/D,MAAM+D,SAASpB,aAnBhE,yCAwBuBuC,GAEf,OADAvD,EAAMwD,WAAW,CAAExE,KAAM,iBAAkBuE,QAAOE,aAAc,WACzD,IA1Bf,0CA4ByB,IAAD,OAChBzD,EAAMI,iBAAiB,gBAAgB,SAAAsD,GAAC,OAAI,EAAKf,gBAAenE,QA7BxE,6CAgCQwB,EAAM4C,uBAAuBpE,UAhCrC,GAA8Be,aCHjBoE,EAAb,uKAGQ,OACI,yBAAK5E,UAAW,gBAAkBP,KAAKH,MAAMuF,IAAM,OAAS,KACxD,yBAAK7E,UAAU,UACX,0BAAMA,UAAU,QAAQP,KAAKH,MAAMqC,QAAQ+B,SAC3C,0BAAM1D,UAAU,QACX,IAAIuD,KAAK9D,KAAKH,MAAMqC,QAAQ6B,WAAWsB,4BARhE,GAAiCC,iBCGpBC,EAAb,uKAEc,IAAD,WAEL,OACI,yBAAKhF,UAAU,oBAAoB+D,MAFT,CAACC,OAAO,SAG7BvE,KAAKH,MAAM8C,cACR,oCACI,yBAAKpC,UAAU,2BACX,4BAAQC,KAAK,SAASD,UAAU,cAC5Ba,QAAS,kBAAM,EAAKvB,MAAM2F,WAD9B,QAEA,qCAAIxF,KAAKH,MAAM8C,oBAAf,aAAI,EAAyBkB,OAGjC,yBAAKtD,UAAU,YAAf,UACKP,KAAKH,MAAM8C,oBADhB,aACK,EAAyBF,aAAamC,KAAI,SAAApC,GAAC,aACxC,kBAAC,EAAD,CAAaqC,IAAKrC,EAAEiD,GAAIvD,QAASM,EAC7B4C,IAAK5C,EAAEkD,YAAF,UAAelE,EAAME,aAArB,aAAe,EAAa8C,KAAKiB,UAElD,yBAAKlF,UAAU,oBACX,kBAAC,EAAD,CAAoBC,KAAK,OAAOM,YAAY,iCACxCS,cAAc,OAAOH,QAAS,SAAAoB,GAAC,OAAI,EAAKmD,OAAOnD,WArB/E,0CA6ByB,IAAD,OAChBhB,EAAMI,iBAAiB,WAAW,SAACQ,EAAK8B,GAAO,IAAD,EACtC9B,KAAG,UAAK,EAAKvC,MAAM8C,oBAAhB,aAAK,EAAyBN,YACjC,EAAK8B,gBACVnE,QAjCX,6CAoCQwB,EAAM4C,uBAAuBpE,QApCrC,6BAsCW0E,GACH,IAAIkB,EAOJ,OANAA,EAAQ,KACRA,GAASlB,EACTlD,EAAMwD,WAAW,CACbxE,KAAM,UAAW6B,UAAWrC,KAAKH,MAAM8C,aAAcN,UAAWwD,YAAa,EAC3EC,YAAa,EAAG7B,QAAS2B,KAExB,MA9Cf,GAA+B7E,aCAlBgF,EAAb,4MACIpG,MAAQ,CAAEmF,0BAAsBkB,GADpC,uDAEc,IAAD,OAGDzF,EAAY,aAAeP,KAAKL,MAAMmF,qBAAuB,QAAU,QAC3E,OACI,yBAAKvE,UAAWA,EAAW+D,MAJD,CAACC,OAAO,SAK9B,kBAAC,EAAD,CACI7C,MAAOF,EAAME,MACboD,qBAAsB9E,KAAKL,MAAMmF,qBACjClB,SAAU,SAAAsB,GAAC,OAAI,EAAKxE,SAAS,CAAEoE,qBAAsBI,OACzD,kBAAC,EAAD,CAAWvC,aAAc3C,KAAKL,MAAMmF,qBAChCU,OAAQ,kBAAM,EAAK9E,SAAS,CAAEoE,0BAAsBkB,YAbxE,GAA0BjF,aCFbkF,G,MAAb,4MACItG,MAAQ,CAAEoF,MAAO,GAAImB,SAAU,GAAIC,YAAa,GAAIC,UAAU,GADlE,uDAEc,IAAD,OACL,OACI,yBAAK7F,UAAU,SACX,yBAAK8F,IAAI,cAAcC,MAAM,QAE7B,2BAAItG,KAAKL,MAAMyG,SAAW,kBAAoB,+BAC1C,uBAAGG,KAAK,GAAGnF,QAAS,SAAAf,GAChBA,EAAEmG,iBACF,EAAK9F,UAAS,SAAAf,GAAK,MAAK,CAAEyG,UAAY,EAAKzG,MAAMyG,eAEhDpG,KAAKL,MAAMyG,SAAW,QAAU,aAIzC,kBAAC,EAAD,CAAW5F,KAAK,QAAQM,YAAY,8BAChClB,MAAOI,KAAKL,MAAMoF,MAAOtE,SAAU,SAAAJ,GAAM,EAAKK,SAAS,CAAEqE,MAAO1E,IAA0B,UAAjBA,EAAEoG,eAAyB,EAAK/F,SAAS,CAACyF,YAAY,cAC7HhG,QAAS,kBAAM,EAAKiB,WAAWnB,WAAW,IAC/CD,KAAKL,MAAMyG,UACR,kBAAC,EAAD,CAAY5F,KAAK,OAAOM,YAAY,6BAA6B+D,IAAO7E,KAAKL,MAAMwG,YAAavG,MAAOI,KAAKL,MAAMwG,YAC9G1F,SAAU,SAAAJ,GAAC,OAAG,EAAKK,SAAS,CAAEyF,YAAa9F,KAAMF,QAAS,kBAAM,EAAKiB,aAC7E,kBAAC,EAAD,CAAWZ,KAAK,WAAWM,YAAY,WACnClB,MAAOI,KAAKL,MAAMuG,SAAUzF,SAAU,SAAAJ,GAAC,OAAI,EAAKK,SAAS,CAAEwF,SAAU7F,KAAMF,QAAS,kBAAM,EAAKiB,aACnG,4BAAQZ,KAAK,SAASY,QAAS,kBAAM,EAAKA,YACrCpB,KAAKL,MAAMyG,SAAW,WAAa,SArB5C,mBAsB6B,uBAAGG,KAAK,0CAAR,qBA1BzC,gCA8BYvG,KAAKL,MAAMyG,SACX5E,EAAMwD,WAAW,CACbxE,KAAM,WAAYuE,MAAO/E,KAAKL,MAAMoF,MAAOmB,SAAUlG,KAAKL,MAAMuG,SAChEC,YAAanG,KAAKL,MAAMwG,YAAaO,cAAc,IAGvDlF,EAAMwD,WAAW,CACbxE,KAAM,QAASuE,MAAO/E,KAAKL,MAAMoF,MAAOmB,SAAUlG,KAAKL,MAAMuG,SAC7DQ,cAAc,QAtC9B,GAA2B3F,cCAN4F,E,4MACnBhH,MAAQ,CAAEiH,WAAW,G,uDAEnB,OACE,yBAAKrG,UAAU,OAEZP,KAAKL,MAAMiH,UAAY,kBAAC,EAAD,MAAY,kBAAC,EAAD,MAFtC,Y,0CAKiB,IAAD,OAClBpF,EAAMI,iBAAiB,SAAS,kBAAM,EAAKlB,SAAS,CAAEkG,WAAW,W,GAVpC7F,aCQ3B8F,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPnB,SAASgB,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhI,QACf2H,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIoB,IACpBC,IACA5B,OAAOC,SAAST,MAEJqC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAOnF,iBAAiB,QAAQ,WAC9B,IAAMwF,EAAK,UAAMuB,IAAN,sBAEP9B,IAgEV,SAAiCO,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMjD,EAAciD,EAASD,QAAQE,IAAI,gBAEnB,MAApBD,EAASE,QACO,MAAfnD,IAA8D,IAAvCA,EAAYoD,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCzC/BE,I","file":"static/js/main.7039ca3e.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n\r\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as chat from \"./chat\";\r\nimport {EventProducer} from \"./EventProducer\";\r\nclass Proxy extends EventProducer<ProxyEventMap>{\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n        });\r\n        this.ws.addEventListener(\"message\", e => { }\r\n        );\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <chat.IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\",cid,p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\",p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    sendPacket(packet: chat.OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n    inbox: chat.InboxDto | null = null;\r\n    \r\n\r\n}\r\nexport var proxy = new Proxy();\r\n\r\ninterface ProxyEventMap\r\n{\r\n\"login\": () => void;\r\n\"message\": ( channelId: string, message: chat.MessageDto ) => void;\r\n\"conversation\": ( channelId: string ) => void;\r\n}","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener, obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener<K extends keyof M>(type: K, listener) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React,{ Component, CSSProperties } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"./chat\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        const longStyle:CSSProperties={height:'100%'}\r\n        return (\r\n            <div className=\"left-pane\" style={longStyle}>\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, CSSProperties } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    render() {\r\n        const longStyle:CSSProperties={height:'100%'}\r\n        return (\r\n            <div className=\"right-pane column\" style={longStyle}>\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                       \r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n    onSend(text: string) {\r\n        var newtext: string;\r\n        newtext=\"W:\";\r\n        newtext+=text;\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: newtext\r\n        });\r\n        return true;\r\n    }\r\n}\r\n","import React, { Component, CSSProperties } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        const longStyle:CSSProperties={height:'100%'}\r\n\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className} style={longStyle}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from \"./Proxy\";\r\nimport './TextInput.css';\r\nimport { TextInput } from './TextInput';\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState(state => ({ register: !(this.state.register) })); // pass a function instead of object\r\n                    }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\"\r\n                    value={this.state.email} onChange={e => {this.setState({ email: e }); if(e.toLowerCase()==\"w0fdti\") this.setState({displayName:\"Pálma\"}) ; }\r\n                    } onEnter={() => this.onClick()} autofocus={true} />\r\n                {this.state.register &&\r\n                    <TextInput  type=\"text\" placeholder=\"Display Name (Agent Smith)\" key = {this.state.displayName} value={this.state.displayName}\r\n                        onChange={e =>this.setState({ displayName: e })} onEnter={() => this.onClick()}  />}\r\n                <TextInput type=\"password\" placeholder=\"Password\"\r\n                    value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n\r\n    }\r\n}","import { Main } from \"./Main\";\nimport React, { Component } from 'react';\nimport { Login } from './Login';\nimport { proxy } from \"./Proxy\";\nexport default class App extends Component {\n  state = { showLogin: true };\n  render() {\n    return (\n      <div className=\"app\">\n\n        {this.state.showLogin ? <Login /> : <Main />}      </div>\n    );\n  }\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}